LINK: https://github.com/strajama/cyber_security_base

Project uses starter template.

For login, use username 'ted' and password 'ted'.

FLAW 1: Cross-Site Scripting (XSS)

Cross-site scripting (XSS) is one of the most well-known web vulnerability that can get site hacked. XSS occurs when a web page displays user input (for example with JavaScript) that isn’t properly validated. A hacker can take advantage of the absence of input filtering and cause a web page to execute malicious code on any user’s computer that views the page, for example to send cookies to the attacker.

Including the HttpOnly flag in the Set-Cookie HTTP response header helps mitigate the risk associated with Cross-Site Scripting (XSS) where an attacker's script code might attempt to read the contents of a cookie and exfiltrate information obtained. The HttpOnly flag directs compatible browsers to prevent client-side script from accessing cookies. When set, browsers that support the flag will not reveal the contents of the cookie to a third party via client-side script executed via XSS. 

CyberSecurityBaseProjectApplication-class has customize-method with the line: cntxt.setUseHttpOnly(false);

Remove that or change false to true so HttpOnly-cookie will be used. When you HttpOnly-cookie is used, it tells the browser that this particular cookie should only be accessed by the server. Any attempt to access the cookie from client script is strictly forbidden. An HttpOnly cookie cannot be accessed by client-side APIs, such as JavaScript. This restriction eliminates the threat of cookie theft via cross-site scripting (XSS).

Also, in done.html there is name and address shown with unescaped text with tag "th:utext". This should be changed to "th:text" or you can write JavaScript to the page, because user input isn't validated. Thymeleaf escapes by default some characters if "th:text" is used.


FLAW 2: Broken Authentication

When authentication functions related to the application are implemented uncorrectly, it allows hackers to compromise passwords or session ID's or to exploit other implementation flaws using other users credentials.

Application has many broken authentication flaws, for example:
1) There is no multi-factor authentication.
2) Application permits default, weak, or well-known passwords.
3) Application permits brute force or other automated attacks.
4) Application uses plain text password.

First three need more work to fix so only the last one is fixed here.

In SecurityConfiguration-class, uncomment next line in configureGlobal-method:

auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());

Now the password isn't shown as plain text.


FLAW 3: Sensitive Data Exposure

Sensitive data exposure occurs when an application inadvertently exposes personal data. Sensitive data exposure differs from a data breach, in which an attacker accesses and steals information.

Data exposure is when data is left exposed in a database or server for anyone to see. Sensitive data exposure occurs as a result of not adequately protecting a database where information is stored. Sensitive data includes sensitive personal information (PII) data such as health records, credentials, personal data, and credit cards, which often require protection as defined by laws or regulations such as the EU GDPR. Sensitive data can be exposed when configuration details for systems and applications are left unsecured online. This might be a result of a multitude of things such as weak encryption, no encryption, software flaws, or when someone mistakenly uploads data to an incorrect database. 

Application shows everyone's name, address and birthday who is signed up to the event.

Not every user should know who is signed up to the event. This information is something that only users with admin roles can access. 

Address and birthday are sensitive data that shouldn't be asked and stored if there isn't special need for that.

List in done.html should be removed and Sign in -info should be changed so that address and birthday aren't needed.


FLAW 4: Security Misconfiguration

Security Misconfiguration is simply defined as failing to implement all the security controls for a server or web application, or implementing the security controls, but doing so with errors. 

All the Security Headers in Spring are disabled in SecurityConfiguration-class. For example, clickjacking can be done, because there is no X-Frame-Options header. There is also no cache control. Cache-control is an HTTP header used to specify browser caching policies in both client requests and server responses. Policies include how a resource is cached, where it’s cached and its maximum age before expiring. Now malicious user can use the browser history to view the cached page.

Also CSRF-token is disabled which makes it ppossible to do CSRF-attack (Cross-Site Request Forgery).


FLAW 5: Broken Access Control

Broken access control shouldn't be  confused with broken authentication. Authentication validates an identity, such as a username and password. After you authenticate, you will be able to access certain pages. If this part of the process is broken, you will be able to access pages and functionality that you are not authorized to see, sometimes unwittingly.

Access control should cover three aspects:

1) authentication - correctly identifying a user when they return to the application.
2) authorization - deciding what actions a user should and should not be able to perform once they have been authenticated.
3) permission checking - evaluating authorization at the point-in-time when a user attempts to perform an action.


In CustomUserDetailsService-class you can see that there are two different user roles (USER and ADMIN), but in SecurityConfiguration-class you can see that after authentication user can do anything and roles aren't used for authorization. 

At least uncomment ".antMatchers("/h2-console/*").hasAnyAuthority("ADMIN")" so database is not accessed by every user. This is enableing permission checking.


FLAW 6: Insufficient Logging & Monitoring

This vulnerability is actually not a real vulnerability. Because of it security compromises are sometimes not detected at all or detected much too late. An attacker spends a lot of time examining an application or system to find the vulnerabilities. If a system does not have sufficient logging and monitoring, the attacker can calmly search for errors and vulnerabilities. This increases the chance of successfully finding and exploiting a vulnerability. Ideally, the application has monitoring software that alerts the user to this threatening investigation. If not, at least one mechanism is needed to inform about the intrusion of an attacker.

This flaw is quite obvious, because there is no logging or monitoring implemented in application to detect any kind of attack. There should be at least some monitoring and alerting for logins and access control failures.


